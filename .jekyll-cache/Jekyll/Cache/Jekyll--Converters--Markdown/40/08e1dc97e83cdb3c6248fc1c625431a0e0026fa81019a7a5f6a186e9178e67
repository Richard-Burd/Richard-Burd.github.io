I"f	<p>I was recently asked if I could sketch up the difference between when you do and don’t use a join table for complex associations.  Let’s take a look at the join table below:
<img src="https://i.imgur.com/z5Kt8og.png" alt="Imgur" />
So here we have a join table called <code class="language-plaintext highlighter-rouge">post_category.rb</code> represented by the blue box.  Notice the contiguous loop of arrows highlighted in yellow; if you start anywhere along this yellow path, you will trace it through all of the association statements back to where you started.  All of the code for these objects (and their analogous migration tables) are provided in the illustration.  Now let’s take a look at another project where a join table is <em>not</em> used:
<img src="https://i.imgur.com/6wmiDsb.png" alt="Imgur" /> 
Here we have the <code class="language-plaintext highlighter-rouge">appointment.rb</code> object model in the same place as our previous (blue colored) <code class="language-plaintext highlighter-rouge">post_category.rb</code> join table in the previous example.  What is the fundamental difference between this illustration and the previous one?  Simply put, the <code class="language-plaintext highlighter-rouge">appointment.rb</code> here is an actual thing; it is a full-fledged Ruby class object model that can accept Ruby instance methods.  It also has an analogous migration table (<code class="language-plaintext highlighter-rouge">CreateAppointments.rb</code>) that contains a row; in this case the <code class="language-plaintext highlighter-rouge">datetime</code> that converts an integer timestamp into a readable format with the month name.  If we wanted to, we could add the location of the appointment, we could also specify start &amp; end times as well.  In effect, the appointment is a join table <em>with extra stuff going on</em> - but it uses the same logic (to bind together objects) as an actual join table.  To be sure, we could associate users to <code class="language-plaintext highlighter-rouge">post_category.rb</code> in the first example such that users follow specific post categories, but then it would be better to change the name of <code class="language-plaintext highlighter-rouge">post_category.rb</code> to something like <code class="language-plaintext highlighter-rouge">topic.rb</code> so we know this is no longer simply a join table.</p>
:ET