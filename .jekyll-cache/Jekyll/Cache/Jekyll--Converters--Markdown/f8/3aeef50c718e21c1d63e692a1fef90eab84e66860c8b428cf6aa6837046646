I"∑R<p>One of the most frustrating aspects of this module (14) in the Flatiron curriculum was the total lack of any framework around Document Object Model (DOM) manipulation.¬†  The adding &amp; removing of DOM elements seemed to exist in a vacuum with no rhyme or reason to it.¬†  This is either how things are done in the real world, or I assume there is some framework that solves this problem which I have not yet encountered.  Either way, I came up with my own system for adding &amp; deleting DOM elements that I‚Äôll just call the <strong>builder-method.</strong>  and used it on my front-end portfolio project <a href="https://github.com/Richard-Burd/front-end-portfolio-project">here</a>.<br />
<br /><br /><br />
In my protfolio project, I have a DOM element called ‚Äúpallet,‚Äù let‚Äôs look at the code for generating a single pallet in the DOM from this file <a href="https://github.com/Richard-Burd/front-end-portfolio-project/blob/master/front-end/src/index.js">here</a>:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">createPallet</span><span class="p">(</span><span class="nx">storageAreaID</span><span class="p">,</span> <span class="nx">palletId</span><span class="p">,</span> <span class="nx">palletName</span><span class="p">,</span> <span class="nx">timeScale</span><span class="p">,</span> <span class="nx">weightScale</span><span class="p">,</span> <span class="nx">firstItem</span><span class="p">,</span> <span class="nx">secondItem</span><span class="p">,</span> <span class="nx">thirdItem</span><span class="p">,</span> <span class="nx">weight</span><span class="p">,</span> <span class="nx">hazmat</span> <span class="p">){</span>

  <span class="kd">let</span> <span class="nx">palletBuilder1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">)</span>
      <span class="nx">palletBuilder1</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">class</span><span class="dl">'</span><span class="p">,</span> <span class="s2">`pallet-box </span><span class="p">${</span><span class="nx">timeScale</span><span class="p">}</span><span class="s2">-timescale </span><span class="p">${</span><span class="nx">weightScale</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
      <span class="nx">palletBuilder1</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">data-pallet-id</span><span class="dl">'</span><span class="p">,</span> <span class="nx">palletId</span> <span class="p">)</span>

  <span class="kd">let</span> <span class="nx">palletBuilder2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">)</span>
      <span class="nx">palletBuilder2</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">class</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">pallet-name</span><span class="dl">'</span><span class="p">)</span>
      <span class="nx">palletBuilder2</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">palletName</span>

  <span class="kd">let</span> <span class="nx">palletBuilder3</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">ul</span><span class="dl">'</span><span class="p">)</span>
      <span class="nx">palletBuilder3</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">class</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">pallet-contents-displayed-in-pallet-box</span><span class="dl">'</span><span class="p">)</span>

  <span class="kd">let</span> <span class="nx">palletBuilder4</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">li</span><span class="dl">'</span><span class="p">)</span>
      <span class="nx">palletBuilder4</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">firstItem</span>

  <span class="kd">let</span> <span class="nx">palletBuilder5</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">li</span><span class="dl">'</span><span class="p">)</span>
      <span class="nx">palletBuilder5</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">secondItem</span>

  <span class="kd">let</span> <span class="nx">palletBuilder6</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">li</span><span class="dl">'</span><span class="p">)</span>
      <span class="nx">palletBuilder6</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">thirdItem</span>

  <span class="kd">let</span> <span class="nx">palletBuilder7</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">)</span>
      <span class="nx">palletBuilder7</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">class</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">delete-pallet</span><span class="dl">'</span><span class="p">)</span>
      <span class="nx">palletBuilder7</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Delete</span><span class="dl">"</span>
      <span class="nx">palletBuilder7</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">deleteASpecifiedPallet</span><span class="p">(</span><span class="nx">palletId</span><span class="p">,</span> <span class="nx">storageAreaID</span><span class="p">)</span>
        <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
      <span class="p">})</span>

  <span class="kd">let</span> <span class="nx">palletBuilder8</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">)</span>
      <span class="nx">palletBuilder8</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">class</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">pallet-weight</span><span class="dl">'</span><span class="p">)</span>
      <span class="nx">palletBuilder8</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">weight</span>

  <span class="c1">// if hazerdous (hazmat) materials are present, the hazmat icon will appear</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">hazmat</span> <span class="o">==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">palletBuilder9</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">img</span><span class="dl">'</span><span class="p">)</span>
        <span class="nx">palletBuilder9</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">class</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">hazmat-icon</span><span class="dl">'</span><span class="p">)</span>
        <span class="nx">palletBuilder9</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">src</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">src/images/HAZMAT.svg</span><span class="dl">'</span><span class="p">)</span>
        <span class="nx">palletBuilder9</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="dl">'</span><span class="s1">title</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">hazmat-icon</span><span class="dl">'</span><span class="p">)</span>

        <span class="nx">palletBuilder1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">palletBuilder9</span><span class="p">)</span> <span class="c1">// arranging subcomponents</span>
  <span class="p">}</span>
      <span class="c1">// first the inner scope gets built</span>
      <span class="nx">palletBuilder3</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">palletBuilder4</span><span class="p">)</span> <span class="c1">// arranging subcomponents</span>
      <span class="nx">palletBuilder3</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">palletBuilder5</span><span class="p">)</span> <span class="c1">// arranging subcomponents</span>
      <span class="nx">palletBuilder3</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">palletBuilder6</span><span class="p">)</span> <span class="c1">// arranging subcomponents</span>

      <span class="c1">// then the outer scope gets built</span>
      <span class="nx">palletBuilder1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">palletBuilder2</span><span class="p">)</span> <span class="c1">// arranging subcomponents</span>
      <span class="nx">palletBuilder1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">palletBuilder3</span><span class="p">)</span> <span class="c1">// arranging subcomponents</span>
      <span class="nx">palletBuilder1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">palletBuilder7</span><span class="p">)</span> <span class="c1">// arranging subcomponents</span>
      <span class="nx">palletBuilder1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">palletBuilder8</span><span class="p">)</span> <span class="c1">// arranging subcomponents</span>

  <span class="c1">// this takes the completed pallet and places it into the correct node ont the DOM</span>
  <span class="kd">let</span> <span class="nx">insertPoint</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">`[data-pallet-group="</span><span class="p">${</span><span class="nx">storageAreaID</span><span class="p">}</span><span class="s2">"]`</span><span class="p">)</span>
      <span class="nx">insertPoint</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">palletBuilder1</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<p>This code looks quite cumbersome &amp; odd, but there are just a few simple rules being followed here:</p>

<ol>
  <li>The variable names are first declared, then when modified, they are indented so as to align with the declaration on the line above.</li>
  <li>There is a space between variables so as to see when one ends and the
   other begins</li>
  <li>The variable names end with a number and are ordered consecutively according to their physical location in the DOM.  In example, <code class="language-plaintext highlighter-rouge">palletBuilder3</code> will always be before (and above) <code class="language-plaintext highlighter-rouge">palletBuilder4</code> in terms of where it displays in the page</li>
  <li>Within a single function, the DOM elements are first created, and only after the creation of all DOM elements, are the DOM elements arranged into various scopes within the DOM.¬†  These arrangements are always marked with the comment <code class="language-plaintext highlighter-rouge">// arranging subcomponents</code> so the human eye can easily catch where this is happening.¬†  Sometimes the <code class="language-plaintext highlighter-rouge">// arranging subcomponents</code> will occur in different blocks separated by <code class="language-plaintext highlighter-rouge">palletBuilder</code> statements, but these are large enough blocks to catch with the human eye when scrolling through the code.</li>
  <li>Only after an element is made by a function, with all of its sub-components properly arranged within, is it added to the DOM.¬†  This last step uses the variable name <code class="language-plaintext highlighter-rouge">insertPoint</code></li>
  <li>Event listeners are the last thing to be added to any single DOM element within a function.</li>
</ol>

<p>Here are the <code class="language-plaintext highlighter-rouge">palletBuilder</code> variables from the code above and the corresponding elements they render:
<a href="https://imgur.com/qQ4WB6Y"><img src="https://i.imgur.com/qQ4WB6Y.jpg" title="source: imgur.com" /></a>
Everything used in the construction of a pallet is a <code class="language-plaintext highlighter-rouge">palletBuilder</code> variable.¬†  The <code class="language-plaintext highlighter-rouge">palletBuilder</code> variables are numbered according to where they occur in the pallet‚Ä¶starting from the top and working down‚Ä¶then working from left to right.¬†  Only after all <code class="language-plaintext highlighter-rouge">palletBuilder</code> variables are properly arranged is the pallet (as a whole) inserted into the DOM using the <code class="language-plaintext highlighter-rouge">insertPoint</code> variable at the bottom of the code snippet above.¬† In order to set all this up, I first render the pallet‚Äôs plain HTML in a scratch script and once I get the HTML &amp; CSS to look the way I want it, I make something like this:</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"pallet-box green-timescale lightweight"</span> <span class="na">data-pallet-id=</span><span class="s">"1"</span><span class="nt">&gt;</span><span class="c">&lt;!--.....(palletBuilder1) --&gt;</span>
   <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"pallet-name"</span><span class="nt">&gt;</span>436L-01<span class="nt">&lt;/div&gt;</span><span class="c">&lt;!--...................................(palletBuilder2) --&gt;</span>
   <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"pallet-contents-displayed-in-pallet-box"</span><span class="nt">&gt;</span><span class="c">&lt;!--.....................(palletBuilder3) --&gt;</span>
      <span class="nt">&lt;li&gt;</span>Bottled Water<span class="nt">&lt;/li&gt;</span><span class="c">&lt;!--................................................(palletBuilder4) --&gt;</span>
      <span class="nt">&lt;li&gt;</span>Rice<span class="nt">&lt;/li&gt;</span><span class="c">&lt;!--.........................................................(palletBuilder5) --&gt;</span>
      <span class="nt">&lt;li&gt;</span>Sugar<span class="nt">&lt;/li&gt;</span><span class="c">&lt;!--........................................................(palletBuilder6) --&gt;</span>
   <span class="nt">&lt;/ul&gt;</span>
   <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"delete-pallet"</span><span class="nt">&gt;</span>Delete<span class="nt">&lt;/button&gt;</span><span class="c">&lt;!--............................(palletBuilder7) --&gt;</span>
   <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"pallet-weight"</span><span class="nt">&gt;</span>400<span class="nt">&lt;/div&gt;</span><span class="c">&lt;!--.....................................(palletBuilder8) --&gt;</span>
   <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">"hazmat-icon"</span> <span class="na">src=</span><span class="s">"src/images/HAZMAT.svg"</span> <span class="na">title=</span><span class="s">"hazmat-icon"</span><span class="nt">&gt;</span><span class="c">&lt;!--(palletBuilder9) --&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>
<p>Here I‚Äôve added the <code class="language-plaintext highlighter-rouge">palletBuilder</code> numbering on the right-hand side of the HTML, and once I have this on one of my computer monitors, I can use the other monitor to fill out each <code class="language-plaintext highlighter-rouge">palletBuilder</code>variable in the Javascript file so it has everything it needs to properly render.</p>

<p>Because I am new to Javascript DOM manipulation, I don‚Äôt know if there is a convention that is used to do something similiar to my newfound ‚Äú<em>builder-method</em>‚Äù or if there is some sort of framework that can organize these elements in a way that makes writing Javascript easier.¬†  When I study different labs in Module 14 of the Flatiron Curriculum, I find Javascript files that seem to have no organization.  In example, we can compare my solution to the Flatiron one in the <strong><em>Dog Fetch CEO Challenge</em></strong> lab below:
<a href="https://imgur.com/Gp7XTqb"><img src="https://i.imgur.com/Gp7XTqb.jpg" title="source: imgur.com" /></a>
You can see here that fetching functions are interspersed with functions that build DOM elements.  There is no correlation to where the DOM elements occur in the code vs. where they occur in the rendered browser.  Additionally, the elements that <em>are</em> created have no HTML class or id properties assigned to them, and this will make functionality expansion difficult down the road when we want to query &amp; select various DOM nodes.¬†  To be sure, this is a practice lab not meant for production, but adding additional properties will make the code more difficult to read regardless.¬†  Compare that to the <code class="language-plaintext highlighter-rouge">palletBuilder</code> variables above.¬† You could tack on an extra 20 properties to say, for example, <code class="language-plaintext highlighter-rouge">palletBuilder9</code> and the code would be just as readable as it was before you added an extra 20 properties.¬†
<br />
Here is an illustration of my Front-End Portfolio Project:
<a href="https://imgur.com/8MgRbQK"><img src="https://i.imgur.com/8MgRbQK.jpg" title="source: imgur.com" /></a>
To solve the problems discussed above, I‚Äôve gone ahead and divided the Javascript into three separate layers within the stack; a <strong><em>fetch</em></strong> layer for communicating with the Rails API, a <strong><em>DOM manipulation</em></strong> layer for rendering HTML into the browser, and an <strong><em>object models</em></strong> layer to act as an intermediary when necessary.¬†  With this setup, I can import a storage area within the <em>fetch</em> layer, make it an object model instance in the <em>object models</em> layer, then build it out in the DOM within the <em>DOM manipulation</em> layer.¬† The functions in each layer only carry out actions relevant to that layer‚Äôs purpose.¬† At this point I know where I‚Äôm supposed to be fetching, where I‚Äôm supposed to be object modeling, and where I go to manipulate the DOM.¬†  The key differential here is the fact that no one Javascript function is allowed to do any combination of these three tasks, creating a clean separation of concerns within the Javascript file itself.</p>
:ET