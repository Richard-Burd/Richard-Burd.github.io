I"¯H<p>Until very recently my illustrations have focused on stack architecture and reference guides.Â   My latest endeavor involves the creation of visual aids that work towards solving the toughest algorithmic problems, that is, I am not looking here to illustrate large code bases involving APIs &amp; multiple stacks, but rather, to illustrate a single algorithm that must solve some sort of difficult problemâ€¦and to date, I havenâ€™t really done anything like this.Â   I am still in the process of creating such a <em>system</em> so I have not yet arrived at a final destination, stay tuned for the final product in a future post.Â </p>

<p>Okay, so l only go big or go home, therefore weâ€™re gonna start with a tough coding problem called the <strong><em>longest common subsequence</em></strong>, or â€˜LCSâ€™ for short.Â  Apparently <a href="https://www.youtube.com/watch?v=10WnvBk9sZc" target="_blank">Google uses LCS in hiring interviews</a> so it is an ideal place to start trying to figure out how to graphically visualize complex algorithms.Â   The basic idea it to take two inputs, what weâ€™ll call <code class="language-plaintext highlighter-rouge">string1</code> and <code class="language-plaintext highlighter-rouge">string2</code>, and find the longest sequence of characters that are common to both of these values.Â   In this example, I will be working in JavaScript and the input values will look like this:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const string1 = "rqvjtweyrztuyio";
const string2 = "qzxwevrtbyrw";
</code></pre></div></div>

<p>There is a live REPL <a href="https://repl.it/@Richard_Burd/Longest-Common-Subsequence#index.js" target="_blank">here</a> and a Git repo <a href="https://github.com/Richard-Burd/longest-common-subsequence" target="_blank">here</a> for reference, and both use the aforementioned input values.Â </p>

<p>My goal is to create an algorithm that is similar to this <a href="https://rosettacode.org/wiki/Longest_common_subsequence#Dynamic_Programming_4" target="_blank">Dynamic Programming</a> solution.Â  I am still not sure exactly how this algorithm works, and I am not looking to replicate its logic, just its output.Â  Letâ€™s put<code class="language-plaintext highlighter-rouge">string1</code> and <code class="language-plaintext highlighter-rouge">string2</code> onto a spreadsheet below in figure 1 with <code class="language-plaintext highlighter-rouge">string1</code> along an â€˜<strong>x</strong>â€™ axis and <code class="language-plaintext highlighter-rouge">string2</code> along a â€˜<strong>y</strong>â€™ axis:Â </p>

<p><a href="https://drive.google.com/file/d/1NyPIxt_I8YnAzIA0KzFM2U6bLehSOr3V/view?usp=sharing" target="_blank">
<img src="https://i.imgur.com/apwySod.jpg" alt="fig.1 LCS diagram" />
</a></p>

<p>Here we can see all of the matches between the two strings (shown in pink above) so now in order to find the longest common subsequence (LCS) we would need to find a series of characters that follow one of the blue arrow paths below in figure 2:Â </p>

<p><a href="https://drive.google.com/file/d/1YPKqj8WQjKRnkAdgxxCwhUK7bz3UcxHI/view?usp=sharing" target="_blank">
<img src="https://i.imgur.com/0X2UWYc.jpg" alt="fig.2 LCS diagram" />
</a></p>

<p>If youâ€™ve got a good eye, youâ€™ll see that the longest common subsequence (LCS) is <code class="language-plaintext highlighter-rouge">qwerty</code>!Â   Letâ€™s take a look at the LCS highlighted in yellow below in Figure 3:Â </p>

<p><a href="https://drive.google.com/file/d/1gAa6watrUILOm77KQ57-DlC7J-zuXRn5/view?usp=sharing" target="_blank">
<img src="https://i.imgur.com/kPK3en3.jpg" alt="fig.3 LCS diagram" />
</a>
You can see that each character (or lower-case letter in our example) occurs in both <code class="language-plaintext highlighter-rouge">string1</code> and <code class="language-plaintext highlighter-rouge">string2</code> and <em>each of these characters also occur in the same chronological orde</em>r.Â   These are the essential characteristics of the LCS.Â </p>

<p>I am not looking for the most efficient solution, just one that is reliable and may need refactoring later on.  At this point I am going to create some JavaScript Object Notation (or JSON) code for each of these matches, letâ€™s see what that looks like in Figure 4 below:Â </p>

<p><a href="https://drive.google.com/file/d/1-F0A_hPPtbJlxHm5KY0OMEfbgXoVLDcJ/view?usp=sharing" target="_blank">
<img src="https://i.imgur.com/Ucc2ytO.jpg" alt="fig.4 LCS diagram" />
</a>
So here we are calling each of these matches (shown in pink) a <strong><em>location</em></strong> - and assigning each one a <code class="language-plaintext highlighter-rouge">locationOrder</code> in the JSON.Â   The ordering starts from the top left &amp; ends in the bottom right of the matrix.Â   If we take a look at the JSON code we also see each location is aware of its own coordinates in the matrix with <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> values.Â   The location is also cognizant of its <code class="language-plaintext highlighter-rouge">descendants</code> - these are the other locations located to the right <em>and</em> bottom of the current location.Â  So letâ€™s have a look at the <strong>t</strong> qwer<strong>t</strong>yâ€™ in order to better understand this.Â   Go ahead and zoom into the t in the lower right-hand corner where youâ€™ll find the following JSON code:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  locationOrder: 13,
  x: 11,
  y: 8,
  descendants: [ 14 ],
  progenyCenses: 1,
  character: 't'
}
</code></pre></div></div>
<p>This is telling us that our <strong>t</strong>:</p>

<ul>
  <li>
    <p>is the 13th location in our matrix</p>
  </li>
  <li>
    <p>is located in the 11th column on the matrix (x-axis)</p>
  </li>
  <li>
    <p>is located in the 8th row on the matrix (y-axis)</p>
  </li>
  <li>
    <p>has one location to its right and bottom, so that location is a
 descendant, and that descendantâ€™s <code class="language-plaintext highlighter-rouge">locationOrder</code> is <code class="language-plaintext highlighter-rouge">14</code>Â </p>
  </li>
  <li>
    <p>has a <code class="language-plaintext highlighter-rouge">progenyCenses</code> value of <code class="language-plaintext highlighter-rouge">1</code> just like every other location.Â   This is the core engine of my algorithm that figures out how to actually find the LCS which I will discuss later.Â </p>
  </li>
  <li>
    <p>has a character value of <code class="language-plaintext highlighter-rouge">t</code></p>
  </li>
</ul>

<p>When we speak of a descendant we mean to say that if the LCS were â€˜qwertyâ€™, then the â€˜râ€™, â€˜tâ€™, and â€˜yâ€™ are all descendants of â€˜eâ€™ because they all come after â€˜eâ€™ in the order of sequence.  Likewise, â€˜tâ€™ and â€˜yâ€™ are descendants of â€˜râ€™ for the same reason, and it goes without saying that everybody in â€˜qwertyâ€™ is a descendant of the â€˜qâ€™ except the â€˜qâ€™ itself which is an ancestor to all of the other characters.Â   This is a good place to point out that <strong><em>my solution here will not track child-parent relationships, and is only aware of descendant-ancestor relationships</em></strong>.  This means there are fewer relationships to track which leads to better efficiency.Â </p>

<p>After creating JSON objects for each location my solution calls for a second iteration over the matrix, this time going in reverse order from the iteration we did in Figure 4 above.Â   As we can see from the arrow below in Figure 5, we need to start the iteration from the lower right-hand corner and work towards the upper left-hand corner.Â   when we arrive at our first location we see it has a <code class="language-plaintext highlighter-rouge">locationOrder</code> value of <code class="language-plaintext highlighter-rouge">14</code> and a <code class="language-plaintext highlighter-rouge">character</code> of <code class="language-plaintext highlighter-rouge">y</code>.Â   Now weâ€™re going to get to the mysterious <code class="language-plaintext highlighter-rouge">progenyCensus</code> value that I identified earlier as the core engone of this solution.Â   At this lower right-most location (location 14) we have a <code class="language-plaintext highlighter-rouge">progenyCensus</code> value of one and we are going to keep it that way.Â  The reason is that this location has no descendants to call its own, and the <code class="language-plaintext highlighter-rouge">progenyCensus</code> is a way to add value to <em>locations who have descendants which in turn also have descendants</em>, but in this case, our location 14 only gets a <code class="language-plaintext highlighter-rouge">progenyCensus</code> value of <code class="language-plaintext highlighter-rouge">1</code> to represent itself.Â </p>

<p><a href="https://drive.google.com/file/d/14VaGzhsKr6yC5fkPm05oWnFMA4TDbEg6/view?usp=sharing" target="_blank">
<img src="https://i.imgur.com/sIpy10b.jpg" alt="fig.5 LCS diagram" />
</a>
Once we get to the location 13 above (the one with a <code class="language-plaintext highlighter-rouge">locationOrder</code> value of <code class="language-plaintext highlighter-rouge">13</code>)  we see it gets a <code class="language-plaintext highlighter-rouge">progenyCensus</code> value of <code class="language-plaintext highlighter-rouge">2</code> - this is because it gets one point for itself (just like location 14 did) but it also get another point for location 14 because location 14 is a descendant and it also has a <code class="language-plaintext highlighter-rouge">progenyCensus</code> value of <code class="language-plaintext highlighter-rouge">1</code> so we add those two 1â€™s together and assign location 13 a final <code class="language-plaintext highlighter-rouge">progenyCensus</code> value of <code class="language-plaintext highlighter-rouge">2</code>.Â </p>

<p>Below we see this pattern repeating once the iteration arrives at location 10 (the one with a locationOrder value of 10) - there we see a big pink 4 that represents the commensurate progenyCensus value.  We get this 4 by looking at the progenyCensus values of all of the descendants (shown inside the blue dotted blobish circle) - there we have a 1 (at location 14) and a 2 (at location 13) and when we give a 1 for the current location (10) we get (1 + 2 + 1) which equals 4.</p>

<p><a href="https://drive.google.com/file/d/1KUJe4xuWwTPO2pRB3OrUsn4G8Lgl04BA/view?usp=sharing" target="_blank">
<img src="https://i.imgur.com/PCQlw8I.jpg" alt="fig.6 LCS diagram" />
</a></p>

<p>We now repeat the pattern until we reach location 8 as shown below in Figure 7; here we have a <code class="language-plaintext highlighter-rouge">progenyCensus</code> value of <code class="language-plaintext highlighter-rouge">11</code> because we took the values of all descendants (shown in the blue dotted circle-y blob) and added them up so that 4 + 2 + 2 + 1 + 1 = 10 plus, the value of 1 for representation of location 8 itself which yields  a total  <code class="language-plaintext highlighter-rouge">progenyCensus</code> value of <code class="language-plaintext highlighter-rouge">11</code> at location 8.Â </p>

<p><a href="https://drive.google.com/file/d/1BM9AJWY12b5zZoIym4XHhX-7SvzL9fvD/view?usp=sharing" target="_blank">
<img src="https://i.imgur.com/rN5KFhE.jpg" alt="fig.7 LCS diagram" />
</a></p>

<p>Once we keep going we get the <code class="language-plaintext highlighter-rouge">progenyCensus</code> values for all of the locations, even those not part of the LCS as shown below in Figure 8:</p>

<p><a href="https://drive.google.com/file/d/1o_I8Sj2pQkwoh8mIc3IMe2nC8r-qZCXH/view?usp=sharing" target="_blank">
<img src="https://i.imgur.com/DrHEPOz.jpg" alt="fig.8 LCS diagram" />
</a></p>

<p>Keep in mind that at this point, our algorithm still has no idea where the longest common subsequence (LCS) is or what locations are included in it.Â   In example, location 4 below (which has a <code class="language-plaintext highlighter-rouge">locationOrder</code> value of <code class="language-plaintext highlighter-rouge">4</code> if you still donâ€™t see the pattern) has a <code class="language-plaintext highlighter-rouge">progenyCensus</code> value of <code class="language-plaintext highlighter-rouge">18</code> and is highlighted in a blue border with a big blue 18 underneath it.Â   To be sure, this location has a lot of descendants and as far as the algorithm is concerned at this point, this location might be in the LCS.Â </p>

<p><a href="https://drive.google.com/file/d/1XqRLS_EZbku4a-Bc3cLlb1RV5W72G1p3/view?usp=sharing" target="_blank">
<img src="https://i.imgur.com/iFsV5EE.jpg" alt="fig.9 LCS diagram" />
</a></p>

<p>Alright, here in Figure 10 we are going to find the first character in the LCS; it is the <strong><em>q</em></strong> in the upper left-hand corner because that location has the highest <code class="language-plaintext highlighter-rouge">progenyCensus</code> value (73) in the entire matrix, so our algorithm here will determine that this in in fact the first character of the LCS.Â   Next question: of all the descendants of q, which one has the highest <code class="language-plaintext highlighter-rouge">progenyCensus</code> value?Â   It turns out the answer is the <strong><em>w</em></strong> with the <code class="language-plaintext highlighter-rouge">progenyCensus</code> value of 22.Â   Remember that descendants have to be to the right and below the current location, below they are highlighted with dark-red borders:</p>

<p><a href="https://drive.google.com/file/d/1LbZFt6yGt42RT8cRqaHtlKUA9iDaTpTg/view?usp=sharing" target="_blank">
<img src="https://i.imgur.com/i0iMVJz.jpg" alt="fig.10 LCS diagram" />
</a></p>

<p>In figure 11 below we just repeat the process; weâ€™ve already determined that the <strong><em>q</em></strong> with a <code class="language-plaintext highlighter-rouge">progenyCensus</code> value of 73 must be the first character in the LCS and its descendent, the <strong><em>w</em></strong> with a <code class="language-plaintext highlighter-rouge">progenyCensus</code> value of <code class="language-plaintext highlighter-rouge">22</code> must be the second character.  Now weâ€™re going to look at the descendants of that <strong><em>w</em></strong>  (that are highlighted with dark-red borders) and ask which of them has the highest <code class="language-plaintext highlighter-rouge">progenyCensus</code> value?Â   The answer is of course the <strong><em>e</em></strong> with a <code class="language-plaintext highlighter-rouge">progenyCensus</code> value of <code class="language-plaintext highlighter-rouge">11</code>.Â </p>

<p><a href="https://drive.google.com/file/d/1Qn_sG8WZSlS77DSuB9IaY2mynqxHjWkE/view?usp=sharing" target="_blank">
<img src="https://i.imgur.com/llFhhyl.jpg" alt="fig.11 LCS diagram" />
</a></p>

<p>And then we repeat the processâ€¦
<a href="https://drive.google.com/file/d/1ClrXo3vPvz2J5_y-PwBrP064bGag0_Ox/view?usp=sharing" target="_blank">
<img src="https://i.imgur.com/beiGmjx.jpg" alt="fig.12 LCS diagram" />
</a></p>

<p>â€¦until we get to the end!
<a href="https://drive.google.com/file/d/1xeF6EmWcfDym6lQAptg7h6rEO6UnFzm2/view?usp=sharing" target="_blank">
<img src="https://i.imgur.com/WVQNQ8g.jpg" alt="fig.13 LCS diagram" />
</a></p>

<p>I discovered this algorithm by accident while starring at a diagram I made that looks very similar to Figure 8 above.Â  I noticed that the LCS had to have some sort of census value that weighed not only descendants, but the <em>descendants of descendants</em>  in such a way that gave more credit to descendant branches with a greater number of generations.Â   Now to be sure, this solution is not as fast as the <a href="https://rosettacode.org/wiki/Longest_common_subsequence#Dynamic_Programming_4" target="_blank">Dynamic Programming</a> example I was trying to replicate, and it also breaks when the <code class="language-plaintext highlighter-rouge">string1</code> and <code class="language-plaintext highlighter-rouge">string2</code> input values get too large.Â </p>

<p>To prevent the breaking, I can simply add a multiplier to the <code class="language-plaintext highlighter-rouge">progenyCensus</code> calculation such that each number in that algorithm will be multiplied by <strong><em>x</em></strong> wherein <strong><em>x</em></strong> represents a value that must increase as <code class="language-plaintext highlighter-rouge">string1</code> and <code class="language-plaintext highlighter-rouge">string2</code> increase in size.Â  This multiplier can be found on line 82 of <a href="https://repl.it/@Richard_Burd/Longest-Common-Subsequence#index.js" target="_blank">this REPL</a> where it is currently set to a value of <code class="language-plaintext highlighter-rouge">8</code>.Â  This will produce <code class="language-plaintext highlighter-rouge">progenyCensus</code> values that are much larger then the ones shown in the figures above, and thus, the chances of any two locations having the same <code class="language-plaintext highlighter-rouge">progenyCensus</code> value will be greatly reduced.Â </p>

<p>In the end, the value this algorithm brings to the table is the fact that it is object oriented and can therefore be expanded upon to include extended functionality.Â   For example, we could add a <strong><em>z</em></strong> axis to this thing and find the LCS between three strings instead of just 2.Â   We could also extend the functionality to exclude certain characters from the LCS, so for example we could say we want the LCS that does <strong><em>not</em></strong> include a letter <strong><em>â€˜qâ€™</em></strong> for example.Â   This could have all sorts of use cases for finding things like DNA sequences or searching for signal patterns while defining certain inputs as noise up front that should be excluded from the return value(s).Â </p>

<p>Finally, to close up I have one last diagram that gives a comprehensive overview of everything discussed in this blog post.Â   The code being illustrated here is the exact same code as what is in the <a href="https://repl.it/@Richard_Burd/Longest-Common-Subsequence#index.js" target="_blank">REPL</a>.Â 
<a href="https://drive.google.com/file/d/1VgipZbzKHnayMyBrFDpEqJ-kJwSb-tx1/view?usp=sharing" target="_blank">
<img src="https://i.imgur.com/pOI0lvk.jpg" alt="Complete LCS diagram" />
</a></p>
:ET